image: registry.gitlab.fpcomplete.com/fpco/default-build-image:5826

cache:
  key: "$CI_BUILD_NAME"
  paths:
    - .stack-work/
    - .stack-root/
    - static/combined/

stages:
  - build
  - deploy

variables:
    STACK_ROOT: "${CI_PROJECT_DIR}/.stack-root"
    #DEPLOYMENT_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_BUILD_REF_SLUG}_${CI_PIPELINE_ID}"
    DEPLOYMENT_IMAGE: "registry.gitlab.fpcomplete.com/fpco-mirrors/stackage-server:master_4296"
    DEPLOYMENT_NAME: "stackage-server-prod"
    HOOGLE_DEPLOYMENT_NAME: "stackage-server-hoogle-prod"
    CRON_DEPLOYMENT_NAME: "stackage-server-cron-prod"
    DEPLOYMENT_APP: "stackage-server-prod"
    CRON_DEPLOYMENT_APP: "stackage-server-cron-prod"
    HOOGLE_DEPLOYMENT_APP: "stackage-server-hoogle-prod"

# This creates anchors for bits of script that are reused between builds
.anchors:
  # The KUBE_* variables are set by Gitlab's Kubernetes deployment service
  - &KUBELOGIN
    echo "$KUBE_CA_PEM" >"$HOME/ca.pem" &&
    kubectl config set-cluster cluster --server="$KUBE_URL" --certificate-authority="$HOME/ca.pem" &&
    kubectl config set-credentials cluster --token="$KUBE_TOKEN" && kubectl config set-context cluster --cluster=cluster --user=cluster --namespace="$KUBE_NAMESPACE" &&
    kubectl config use-context cluster
  - &KUBEAPPLY
    kubectl apply -f <(envsubst <etc/kube/service_template.yaml) &&
    kubectl apply -f <(envsubst <etc/kube/hoogle_service_template.yaml) &&
    kubectl apply -f <(envsubst <etc/kube/deployment_template.yaml) &&
    kubectl apply -f <(envsubst <etc/kube/cron_deployment_template.yaml) &&
    kubectl apply -f <(envsubst <etc/kube/hoogle_deployment_template.yaml)
  - &HELMUPGRADE
    helm --tiller-namespace ${KUBE_NAMESPACE} upgrade -i "${DEPLOYMENT_NAME}" etc/helm --set name="${DEPLOYMENT_NAME}" --set app="${DEPLOYMENT_APP}" --set hoogleName="${HOOGLE_DEPLOYMENT_NAME}" --set hoogleApp="${HOOGLE_DEPLOYMENT_APP}" --set cronName="${CRON_DEPLOYMENT_NAME}" --set cronApp="${HOOGLE_DEPLOYMENT_APP}" --set image.image="${DEPLOYMENT_IMAGE}" --values etc/helm/values/$CI_ENVIRONMENT_NAME.yaml --namespace ${KUBE_NAMESPACE}
  - &HELMCHECK
    helm --tiller-namespace ${KUBE_NAMESPACE} ls &&
    helm --tiller-namespace ${KUBE_NAMESPACE} status "${DEPLOYMENT_NAME}"

    #build:
    #  stage: build
    #  script:
    #    # Clear *_TOKEN variables during code build so that compile-time code can't access them
    #    - apt-get update && apt-get install -y --no-install-recommends libpq-dev git rsync
    #    - CI_BUILD_TOKEN="" KUBE_TOKEN="" PROD_KUBE_TOKEN="" PROD_DOCKER_PASSWORD="" etc/scripts/stage_docker.sh --install-ghc --test
    #    - docker build -t "${DEPLOYMENT_IMAGE}" etc/docker
    #    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
    #    - docker push "${DEPLOYMENT_IMAGE}"
    #    - |
    #      if [[ "$CI_BUILD_REF_NAME" == "master" ]]; then
    #        docker tag "${DEPLOYMENT_IMAGE}" "${CI_REGISTRY_IMAGE}:latest"
    #        docker push "${CI_REGISTRY_IMAGE}:latest"
    #      fi
    #      if [[ "$CI_BUILD_REF_NAME" == "ci-cron" ]]; then
    #        docker tag "${DEPLOYMENT_IMAGE}" "${CI_REGISTRY_IMAGE}:ci-cron"
    #        docker push "${CI_REGISTRY_IMAGE}:ci-cron"
    #      fi

deploy_prod:
  stage: deploy
  only:
    - master
  environment:
    name: stackage-server-prod
    url: https://www.stackage.org/
  variables:
    DEPLOYMENT_NAME: "stackage-server-prod"
    HOOGLE_DEPLOYMENT_NAME: "stackage-server-hoogle-prod"
    CRON_DEPLOYMENT_NAME: "stackage-server-cron-prod"
    PROD_DEPLOYMENT_IMAGE: "fpco/stackage-server-prod:${CI_BUILD_REF_SLUG}_${CI_PIPELINE_ID}"
    HOST: stackage.org
  script:
    - export
      KUBE_CA_PEM="$PROD_KUBE_CA_PEM"
      KUBE_URL="$PROD_KUBE_URL"
      KUBE_TOKEN="$PROD_KUBE_TOKEN"
      KUBE_NAMESPACE="$PROD_KUBE_NAMESPACE"
    - *KUBELOGIN
    - docker login -u "$PROD_DOCKER_USERNAME" -p "${PROD_DOCKER_PASSWORD}"
    - docker tag "$DEPLOYMENT_IMAGE" "$PROD_DEPLOYMENT_IMAGE"
    - docker push "$PROD_DEPLOYMENT_IMAGE"
    - docker tag "$DEPLOYMENT_IMAGE" "fpco/stackage-server-prod:latest"
    - docker push "fpco/stackage-server-prod:latest"
    - kubectl set image "deployment/$DEPLOYMENT_NAME" stackage-server="$PROD_DEPLOYMENT_IMAGE"
    - kubectl set image "deployment/$HOOGLE_DEPLOYMENT_NAME" stackage-server-hoogle="$PROD_DEPLOYMENT_IMAGE"
    - kubectl set image "deployment/$CRON_DEPLOYMENT_NAME" stackage-server-cron="$PROD_DEPLOYMENT_IMAGE"
    - kubectl rollout status "deployment/$DEPLOYMENT_NAME"
    - kubectl rollout status "deployment/$HOOGLE_DEPLOYMENT_NAME"
    - kubectl rollout status "deployment/$CRON_DEPLOYMENT_NAME"

deploy_ci:
  stage: deploy
  #only:
  #  - ci
  environment:
    name: staging
    url: https://ci.stackage.org/
  variables:
    KUBE_NAMESPACE: "fpco-public"
    DEPLOYMENT_NAME: "stackage-server-ci"
    HOOGLE_DEPLOYMENT_NAME: "stackage-server-hoogle-ci"
    CRON_DEPLOYMENT_NAME: "stackage-server-cron-ci"
    DEPLOYMENT_APP: "stackage-server-ci"
    CRON_DEPLOYMENT_APP: "stackage-server-cron-ci"
    HOOGLE_DEPLOYMENT_APP: "stackage-server-hoogle-ci"
    HOST: ci.stackage.org
  script:
    - *KUBELOGIN
    - *HELMUPGRADE
    - *HELMCHECK
